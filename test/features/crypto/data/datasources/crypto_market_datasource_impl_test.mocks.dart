// Mocks generated by Mockito 5.4.5 from annotations
// in nemorixpay/test/features/crypto/data/datasources/crypto_market_datasource_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:nemorixpay/shared/cache/core/managers/asset_cache_manager.dart'
    as _i3;
import 'package:nemorixpay/shared/common/data/models/asset_model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAssetModel_0 extends _i1.SmartFake implements _i2.AssetModel {
  _FakeAssetModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AssetCacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssetCacheManager extends _i1.Mock implements _i3.AssetCacheManager {
  MockAssetCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get needsRefresh =>
      (super.noSuchMethod(Invocation.getter(#needsRefresh), returnValue: false)
          as bool);

  @override
  int get assetCount =>
      (super.noSuchMethod(Invocation.getter(#assetCount), returnValue: 0)
          as int);

  @override
  List<_i2.AssetModel> get nativeAssets =>
      (super.noSuchMethod(
            Invocation.getter(#nativeAssets),
            returnValue: <_i2.AssetModel>[],
          )
          as List<_i2.AssetModel>);

  @override
  List<Object?> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object?>[])
          as List<Object?>);

  @override
  _i4.Future<void> assetsEmpty() =>
      (super.noSuchMethod(
            Invocation.method(#assetsEmpty, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> loadAssetsFromStellar() =>
      (super.noSuchMethod(
            Invocation.method(#loadAssetsFromStellar, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String> sendTransaction(
    String? destinationPublicKey,
    double? amount,
    String? memo,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#sendTransaction, [
              destinationPublicKey,
              amount,
              memo,
            ]),
            returnValue: _i4.Future<String>.value(
              _i5.dummyValue<String>(
                this,
                Invocation.method(#sendTransaction, [
                  destinationPublicKey,
                  amount,
                  memo,
                ]),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<_i2.AssetModel> getAssetByCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#getAssetByCode, [code]),
            returnValue: _i4.Future<_i2.AssetModel>.value(
              _FakeAssetModel_0(
                this,
                Invocation.method(#getAssetByCode, [code]),
              ),
            ),
          )
          as _i4.Future<_i2.AssetModel>);

  @override
  _i2.AssetModel? getAsset(String? assetCode, {String? assetIssuer}) =>
      (super.noSuchMethod(
            Invocation.method(
              #getAsset,
              [assetCode],
              {#assetIssuer: assetIssuer},
            ),
          )
          as _i2.AssetModel?);

  @override
  void updateAsset(_i2.AssetModel? asset) => super.noSuchMethod(
    Invocation.method(#updateAsset, [asset]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<List<_i2.AssetModel>> getAllAssets() =>
      (super.noSuchMethod(
            Invocation.method(#getAllAssets, []),
            returnValue: _i4.Future<List<_i2.AssetModel>>.value(
              <_i2.AssetModel>[],
            ),
          )
          as _i4.Future<List<_i2.AssetModel>>);

  @override
  _i4.Future<List<_i2.AssetModel>> getAccountAssets() =>
      (super.noSuchMethod(
            Invocation.method(#getAccountAssets, []),
            returnValue: _i4.Future<List<_i2.AssetModel>>.value(
              <_i2.AssetModel>[],
            ),
          )
          as _i4.Future<List<_i2.AssetModel>>);

  @override
  _i4.Future<List<_i2.AssetModel>> getAssetsByCode(String? assetCode) =>
      (super.noSuchMethod(
            Invocation.method(#getAssetsByCode, [assetCode]),
            returnValue: _i4.Future<List<_i2.AssetModel>>.value(
              <_i2.AssetModel>[],
            ),
          )
          as _i4.Future<List<_i2.AssetModel>>);

  @override
  _i4.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void clearCacheSync() => super.noSuchMethod(
    Invocation.method(#clearCacheSync, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<List<_i2.AssetModel>> getAssetsByNetwork(String? network) =>
      (super.noSuchMethod(
            Invocation.method(#getAssetsByNetwork, [network]),
            returnValue: _i4.Future<List<_i2.AssetModel>>.value(
              <_i2.AssetModel>[],
            ),
          )
          as _i4.Future<List<_i2.AssetModel>>);

  @override
  _i4.Future<List<_i2.AssetModel>> getAssetsByType(String? type) =>
      (super.noSuchMethod(
            Invocation.method(#getAssetsByType, [type]),
            returnValue: _i4.Future<List<_i2.AssetModel>>.value(
              <_i2.AssetModel>[],
            ),
          )
          as _i4.Future<List<_i2.AssetModel>>);

  @override
  _i4.Future<List<_i2.AssetModel>> getAssetsByIssuer(String? issuer) =>
      (super.noSuchMethod(
            Invocation.method(#getAssetsByIssuer, [issuer]),
            returnValue: _i4.Future<List<_i2.AssetModel>>.value(
              <_i2.AssetModel>[],
            ),
          )
          as _i4.Future<List<_i2.AssetModel>>);

  @override
  _i4.Future<void> updateAssets(List<_i2.AssetModel>? assets) =>
      (super.noSuchMethod(
            Invocation.method(#updateAssets, [assets]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.AssetModel>> getAssetsIfNeeded(
    _i4.Future<List<_i2.AssetModel>> Function()? fetchAssets,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getAssetsIfNeeded, [fetchAssets]),
            returnValue: _i4.Future<List<_i2.AssetModel>>.value(
              <_i2.AssetModel>[],
            ),
          )
          as _i4.Future<List<_i2.AssetModel>>);

  @override
  void removeAsset(String? id) => super.noSuchMethod(
    Invocation.method(#removeAsset, [id]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<int> getAssetCountByNetwork(String? network) =>
      (super.noSuchMethod(
            Invocation.method(#getAssetCountByNetwork, [network]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> getAssetCountByType(String? type) =>
      (super.noSuchMethod(
            Invocation.method(#getAssetCountByType, [type]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);
}
