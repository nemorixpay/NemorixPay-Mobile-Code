// Mocks generated by Mockito 5.4.5 from annotations
// in nemorixpay/test/features/crypto/domain/usecases/update_market_data_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nemorixpay/core/errors/failures.dart' as _i5;
import 'package:nemorixpay/features/crypto/domain/entities/crypto_asset_with_market_data.dart'
    as _i6;
import 'package:nemorixpay/features/crypto/domain/entities/market_data_entity.dart'
    as _i7;
import 'package:nemorixpay/features/crypto/domain/repositories/crypto_market_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CryptoMarketRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCryptoMarketRepository extends _i1.Mock
    implements _i3.CryptoMarketRepository {
  MockCryptoMarketRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.CryptoAssetWithMarketData>>>
  getCryptoAssets() =>
      (super.noSuchMethod(
            Invocation.method(#getCryptoAssets, []),
            returnValue: _i4.Future<
              _i2.Either<_i5.Failure, List<_i6.CryptoAssetWithMarketData>>
            >.value(
              _FakeEither_0<_i5.Failure, List<_i6.CryptoAssetWithMarketData>>(
                this,
                Invocation.method(#getCryptoAssets, []),
              ),
            ),
          )
          as _i4.Future<
            _i2.Either<_i5.Failure, List<_i6.CryptoAssetWithMarketData>>
          >);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.MarketDataEntity>> getMarketData(
    String? symbol,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getMarketData, [symbol]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i7.MarketDataEntity>>.value(
                  _FakeEither_0<_i5.Failure, _i7.MarketDataEntity>(
                    this,
                    Invocation.method(#getMarketData, [symbol]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i7.MarketDataEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.CryptoAssetWithMarketData>>
  getCryptoAssetDetails(String? symbol) =>
      (super.noSuchMethod(
            Invocation.method(#getCryptoAssetDetails, [symbol]),
            returnValue: _i4.Future<
              _i2.Either<_i5.Failure, _i6.CryptoAssetWithMarketData>
            >.value(
              _FakeEither_0<_i5.Failure, _i6.CryptoAssetWithMarketData>(
                this,
                Invocation.method(#getCryptoAssetDetails, [symbol]),
              ),
            ),
          )
          as _i4.Future<
            _i2.Either<_i5.Failure, _i6.CryptoAssetWithMarketData>
          >);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.MarketDataEntity>> updateMarketData(
    String? symbol,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateMarketData, [symbol]),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i7.MarketDataEntity>>.value(
                  _FakeEither_0<_i5.Failure, _i7.MarketDataEntity>(
                    this,
                    Invocation.method(#updateMarketData, [symbol]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i7.MarketDataEntity>>);
}
