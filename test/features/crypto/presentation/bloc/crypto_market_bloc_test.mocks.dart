// Mocks generated by Mockito 5.4.5 from annotations
// in nemorixpay/test/features/crypto/presentation/bloc/crypto_market_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nemorixpay/core/errors/failures.dart' as _i6;
import 'package:nemorixpay/features/crypto/domain/entities/crypto_asset_with_market_data.dart'
    as _i7;
import 'package:nemorixpay/features/crypto/domain/entities/market_data_entity.dart'
    as _i10;
import 'package:nemorixpay/features/crypto/domain/repositories/crypto_market_repository.dart'
    as _i2;
import 'package:nemorixpay/features/crypto/domain/usecases/get_crypto_asset_details_usecase.dart'
    as _i8;
import 'package:nemorixpay/features/crypto/domain/usecases/get_crypto_assets_usecase.dart'
    as _i4;
import 'package:nemorixpay/features/crypto/domain/usecases/get_market_data_usecase.dart'
    as _i9;
import 'package:nemorixpay/features/crypto/domain/usecases/update_market_data_usecase.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCryptoMarketRepository_0 extends _i1.SmartFake
    implements _i2.CryptoMarketRepository {
  _FakeCryptoMarketRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetCryptoAssetsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCryptoAssetsUseCase extends _i1.Mock
    implements _i4.GetCryptoAssetsUseCase {
  MockGetCryptoAssetsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CryptoMarketRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCryptoMarketRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CryptoMarketRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.CryptoAssetWithMarketData>>>
  call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, List<_i7.CryptoAssetWithMarketData>>
            >.value(
              _FakeEither_1<_i6.Failure, List<_i7.CryptoAssetWithMarketData>>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i5.Future<
            _i3.Either<_i6.Failure, List<_i7.CryptoAssetWithMarketData>>
          >);
}

/// A class which mocks [GetCryptoAssetDetailsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCryptoAssetDetailsUseCase extends _i1.Mock
    implements _i8.GetCryptoAssetDetailsUseCase {
  MockGetCryptoAssetDetailsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CryptoMarketRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCryptoMarketRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CryptoMarketRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.CryptoAssetWithMarketData>> call(
    String? symbol,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [symbol]),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, _i7.CryptoAssetWithMarketData>
            >.value(
              _FakeEither_1<_i6.Failure, _i7.CryptoAssetWithMarketData>(
                this,
                Invocation.method(#call, [symbol]),
              ),
            ),
          )
          as _i5.Future<
            _i3.Either<_i6.Failure, _i7.CryptoAssetWithMarketData>
          >);
}

/// A class which mocks [GetMarketDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMarketDataUseCase extends _i1.Mock
    implements _i9.GetMarketDataUseCase {
  MockGetMarketDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CryptoMarketRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCryptoMarketRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CryptoMarketRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i10.MarketDataEntity>> call(
    String? symbol,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [symbol]),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, _i10.MarketDataEntity>
            >.value(
              _FakeEither_1<_i6.Failure, _i10.MarketDataEntity>(
                this,
                Invocation.method(#call, [symbol]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i10.MarketDataEntity>>);
}

/// A class which mocks [UpdateMarketDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateMarketDataUseCase extends _i1.Mock
    implements _i11.UpdateMarketDataUseCase {
  MockUpdateMarketDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CryptoMarketRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeCryptoMarketRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.CryptoMarketRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i10.MarketDataEntity>> call(
    String? symbol,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [symbol]),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, _i10.MarketDataEntity>
            >.value(
              _FakeEither_1<_i6.Failure, _i10.MarketDataEntity>(
                this,
                Invocation.method(#call, [symbol]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i10.MarketDataEntity>>);
}
