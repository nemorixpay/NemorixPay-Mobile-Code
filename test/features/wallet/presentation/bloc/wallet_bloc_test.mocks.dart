// Mocks generated by Mockito 5.4.5 from annotations
// in nemorixpay/test/features/wallet/presentation/bloc/wallet_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nemorixpay/core/errors/failures.dart' as _i6;
import 'package:nemorixpay/features/wallet/domain/entities/wallet.dart' as _i7;
import 'package:nemorixpay/features/wallet/domain/repositories/wallet_repository.dart'
    as _i2;
import 'package:nemorixpay/features/wallet/domain/usecases/create_wallet.dart'
    as _i4;
import 'package:nemorixpay/features/wallet/domain/usecases/get_wallet_balance.dart'
    as _i9;
import 'package:nemorixpay/features/wallet/domain/usecases/import_wallet.dart'
    as _i8;
import 'package:nemorixpay/features/wallet/domain/usecases/save_public_key_usecase.dart'
    as _i11;
import 'package:nemorixpay/features/wallet/domain/usecases/seed_phrase_usecase.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWalletRepository_0 extends _i1.SmartFake
    implements _i2.WalletRepository {
  _FakeWalletRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CreateWalletUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateWalletUseCase extends _i1.Mock
    implements _i4.CreateWalletUseCase {
  MockCreateWalletUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WalletRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWalletRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WalletRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Wallet>> call(String? mnemonic) =>
      (super.noSuchMethod(
            Invocation.method(#call, [mnemonic]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Wallet>>.value(
              _FakeEither_1<_i6.Failure, _i7.Wallet>(
                this,
                Invocation.method(#call, [mnemonic]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Wallet>>);
}

/// A class which mocks [ImportWalletUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockImportWalletUseCase extends _i1.Mock
    implements _i8.ImportWalletUseCase {
  MockImportWalletUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WalletRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWalletRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WalletRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Wallet>> call(String? mnemonic) =>
      (super.noSuchMethod(
            Invocation.method(#call, [mnemonic]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Wallet>>.value(
              _FakeEither_1<_i6.Failure, _i7.Wallet>(
                this,
                Invocation.method(#call, [mnemonic]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Wallet>>);
}

/// A class which mocks [GetWalletBalanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletBalanceUseCase extends _i1.Mock
    implements _i9.GetWalletBalanceUseCase {
  MockGetWalletBalanceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WalletRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWalletRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WalletRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, double>> call(String? publicKey) =>
      (super.noSuchMethod(
            Invocation.method(#call, [publicKey]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, double>>.value(
              _FakeEither_1<_i6.Failure, double>(
                this,
                Invocation.method(#call, [publicKey]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, double>>);
}

/// A class which mocks [CreateSeedPhraseUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateSeedPhraseUseCase extends _i1.Mock
    implements _i10.CreateSeedPhraseUseCase {
  MockCreateSeedPhraseUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WalletRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWalletRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WalletRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<String>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
                  _FakeEither_1<_i6.Failure, List<String>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<String>>>);
}

/// A class which mocks [SavePublicKeyUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSavePublicKeyUseCase extends _i1.Mock
    implements _i11.SavePublicKeyUseCase {
  MockSavePublicKeyUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> call(String? publicKey, String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [publicKey, userId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}
