// Mocks generated by Mockito 5.4.5 from annotations
// in nemorixpay/test/features/settings/presentation/bloc/settings_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:nemorixpay/features/settings/domain/repositories/settings_repository.dart'
    as _i2;
import 'package:nemorixpay/features/settings/domain/usecases/get_dark_mode_preference.dart'
    as _i3;
import 'package:nemorixpay/features/settings/domain/usecases/get_language_usecase.dart'
    as _i6;
import 'package:nemorixpay/features/settings/domain/usecases/set_language_usecase.dart'
    as _i8;
import 'package:nemorixpay/features/settings/domain/usecases/toggle_dark_mode_usecase.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSettingsRepository_0 extends _i1.SmartFake
    implements _i2.SettingsRepository {
  _FakeSettingsRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetDarkModePreference].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDarkModePreference extends _i1.Mock
    implements _i3.GetDarkModePreference {
  MockGetDarkModePreference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SettingsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeSettingsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.SettingsRepository);

  @override
  _i4.Future<bool> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [ToggleDarkModeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockToggleDarkModeUseCase extends _i1.Mock
    implements _i5.ToggleDarkModeUseCase {
  MockToggleDarkModeUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SettingsRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeSettingsRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.SettingsRepository);

  @override
  _i4.Future<bool> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [GetLanguageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLanguageUseCase extends _i1.Mock
    implements _i6.GetLanguageUseCase {
  MockGetLanguageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<String>.value(
              _i7.dummyValue<String>(this, Invocation.method(#call, [])),
            ),
          )
          as _i4.Future<String>);
}

/// A class which mocks [SetLanguageUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetLanguageUseCase extends _i1.Mock
    implements _i8.SetLanguageUseCase {
  MockSetLanguageUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> call(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#call, [languageCode]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
