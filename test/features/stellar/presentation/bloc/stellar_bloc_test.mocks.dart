// Mocks generated by Mockito 5.4.5 from annotations
// in nemorixpay/test/features/stellar/presentation/bloc/stellar_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nemorixpay/core/errors/failures.dart' as _i6;
import 'package:nemorixpay/shared/stellar/domain/entities/stellar_account.dart'
    as _i8;
import 'package:nemorixpay/shared/stellar/domain/entities/stellar_asset.dart'
    as _i15;
import 'package:nemorixpay/shared/stellar/domain/entities/stellar_asset_info.dart'
    as _i17;
import 'package:nemorixpay/shared/stellar/domain/entities/stellar_transaction.dart'
    as _i11;
import 'package:nemorixpay/shared/stellar/domain/repositories/stellar_repository.dart'
    as _i2;
import 'package:nemorixpay/shared/stellar/domain/usecases/create_account_usecase.dart'
    as _i7;
import 'package:nemorixpay/shared/stellar/domain/usecases/generate_mnemonic_usecase.dart'
    as _i4;
import 'package:nemorixpay/shared/stellar/domain/usecases/get_account_assets_usecase.dart'
    as _i14;
import 'package:nemorixpay/shared/stellar/domain/usecases/get_account_balance_usecase.dart'
    as _i9;
import 'package:nemorixpay/shared/stellar/domain/usecases/get_available_assets_usecase.dart'
    as _i16;
import 'package:nemorixpay/shared/stellar/domain/usecases/import_account_usecase.dart'
    as _i13;
import 'package:nemorixpay/shared/stellar/domain/usecases/send_payment_usecase.dart'
    as _i10;
import 'package:nemorixpay/shared/stellar/domain/usecases/validate_transaction_usecase.dart'
    as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStellarRepository_0 extends _i1.SmartFake
    implements _i2.StellarRepository {
  _FakeStellarRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GenerateMnemonicUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenerateMnemonicUseCase extends _i1.Mock
    implements _i4.GenerateMnemonicUseCase {
  MockGenerateMnemonicUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StellarRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeStellarRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.StellarRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<String>>> call({
    int? strength = 256,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#strength: strength}),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
                  _FakeEither_1<_i6.Failure, List<String>>(
                    this,
                    Invocation.method(#call, [], {#strength: strength}),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<String>>>);
}

/// A class which mocks [CreateAccountUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateAccountUseCase extends _i1.Mock
    implements _i7.CreateAccountUseCase {
  MockCreateAccountUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StellarRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeStellarRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.StellarRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i8.StellarAccount>> call({
    required String? mnemonic,
    String? passphrase = '',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #mnemonic: mnemonic,
              #passphrase: passphrase,
            }),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i8.StellarAccount>>.value(
                  _FakeEither_1<_i6.Failure, _i8.StellarAccount>(
                    this,
                    Invocation.method(#call, [], {
                      #mnemonic: mnemonic,
                      #passphrase: passphrase,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i8.StellarAccount>>);
}

/// A class which mocks [GetAccountBalanceUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAccountBalanceUseCase extends _i1.Mock
    implements _i9.GetAccountBalanceUseCase {
  MockGetAccountBalanceUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StellarRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeStellarRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.StellarRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i8.StellarAccount>> call(
    String? publicKey,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [publicKey]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i8.StellarAccount>>.value(
                  _FakeEither_1<_i6.Failure, _i8.StellarAccount>(
                    this,
                    Invocation.method(#call, [publicKey]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i8.StellarAccount>>);
}

/// A class which mocks [SendPaymentUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendPaymentUseCase extends _i1.Mock
    implements _i10.SendPaymentUseCase {
  MockSendPaymentUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StellarRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeStellarRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.StellarRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.StellarTransaction>> call({
    required String? sourceSecretKey,
    required String? destinationPublicKey,
    required double? amount,
    String? memo,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #sourceSecretKey: sourceSecretKey,
              #destinationPublicKey: destinationPublicKey,
              #amount: amount,
              #memo: memo,
            }),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, _i11.StellarTransaction>
            >.value(
              _FakeEither_1<_i6.Failure, _i11.StellarTransaction>(
                this,
                Invocation.method(#call, [], {
                  #sourceSecretKey: sourceSecretKey,
                  #destinationPublicKey: destinationPublicKey,
                  #amount: amount,
                  #memo: memo,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i11.StellarTransaction>>);
}

/// A class which mocks [ValidateTransactionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockValidateTransactionUseCase extends _i1.Mock
    implements _i12.ValidateTransactionUseCase {
  MockValidateTransactionUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StellarRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeStellarRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.StellarRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.StellarTransaction>> call(
    String? transactionHash,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [transactionHash]),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, _i11.StellarTransaction>
            >.value(
              _FakeEither_1<_i6.Failure, _i11.StellarTransaction>(
                this,
                Invocation.method(#call, [transactionHash]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i11.StellarTransaction>>);
}

/// A class which mocks [ImportAccountUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockImportAccountUseCase extends _i1.Mock
    implements _i13.ImportAccountUseCase {
  MockImportAccountUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StellarRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeStellarRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.StellarRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i8.StellarAccount>> call({
    required String? mnemonic,
    String? passphrase = '',
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #mnemonic: mnemonic,
              #passphrase: passphrase,
            }),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i8.StellarAccount>>.value(
                  _FakeEither_1<_i6.Failure, _i8.StellarAccount>(
                    this,
                    Invocation.method(#call, [], {
                      #mnemonic: mnemonic,
                      #passphrase: passphrase,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i8.StellarAccount>>);
}

/// A class which mocks [GetAccountAssetsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAccountAssetsUseCase extends _i1.Mock
    implements _i14.GetAccountAssetsUseCase {
  MockGetAccountAssetsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StellarRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeStellarRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.StellarRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i15.StellarAsset>>> call(
    String? publicKey,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [publicKey]),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, List<_i15.StellarAsset>>
            >.value(
              _FakeEither_1<_i6.Failure, List<_i15.StellarAsset>>(
                this,
                Invocation.method(#call, [publicKey]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i15.StellarAsset>>>);
}

/// A class which mocks [GetAvailableAssetsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAvailableAssetsUseCase extends _i1.Mock
    implements _i16.GetAvailableAssetsUseCase {
  MockGetAvailableAssetsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StellarRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeStellarRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.StellarRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i17.StellarAssetInfo>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, List<_i17.StellarAssetInfo>>
            >.value(
              _FakeEither_1<_i6.Failure, List<_i17.StellarAssetInfo>>(
                this,
                Invocation.method(#call, []),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i17.StellarAssetInfo>>>);
}
