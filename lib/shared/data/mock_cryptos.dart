import 'package:nemorixpay/features/cryptocurrency/domain/entity/crypto_entity.dart';
import 'package:nemorixpay/features/cryptocurrency/domain/entity/crypto_price_point.dart';

/// @file        mock_cryptos.dart
/// @brief       Mock data list for various cryptocurrencies.
/// @details     This file contains a list of mocked cryptocurrency data for UI development and testing purposes.
/// @author      Miguel Fagundez
/// @date        2025-04-15
/// @version     1.2
/// @copyright   Apache 2.0 License

// Función auxiliar para crear puntos de precio
CryptoPricePoint _createPricePoint({
  required double price,
  required double volume,
  required double marketCap,
  required DateTime timestamp,
  double change24h = 0.0,
  double high24h = 0.0,
  double low24h = 0.0,
  double open24h = 0.0,
}) {
  return CryptoPricePoint(
    price: price,
    volume: volume,
    marketCap: marketCap,
    timestamp: timestamp,
    change24h: change24h,
    high24h: high24h,
    low24h: low24h,
    open24h: open24h,
  );
}

// Función auxiliar para crear puntos de precio para un rango de tiempo
List<CryptoPricePoint> _createTimeRangePoints({
  required List<double> prices,
  required double baseVolume,
  required double baseMarketCap,
  required DateTime startTime,
  required Duration interval,
  double change24h = 0.0,
  double high24h = 0.0,
  double low24h = 0.0,
  double open24h = 0.0,
}) {
  return List.generate(prices.length, (index) {
    final volume = baseVolume * (1 + (index * 0.1));
    final marketCap = baseMarketCap * (1 + (index * 0.1));
    return _createPricePoint(
      price: prices[index],
      volume: volume,
      marketCap: marketCap,
      timestamp: startTime.add(interval * index),
      change24h: change24h,
      high24h: high24h,
      low24h: low24h,
      open24h: open24h,
    );
  });
}

final List<Crypto> mockCryptos = [
  Crypto(
    name: 'Bitcoin',
    abbreviation: 'BTC',
    project: 'Bitcoin.org',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 65000.0,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [60000.0, 62000.0, 64000.0, 65000.0],
        baseVolume: 25000000000,
        baseMarketCap: 1150000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 8.33,
        high24h: 65500.0,
        low24h: 59500.0,
        open24h: 60000.0,
      ),
      '1W': _createTimeRangePoints(
        prices: [60000.0, 62000.0, 64000.0, 65000.0],
        baseVolume: 25000000000,
        baseMarketCap: 1150000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [50000.0, 55000.0, 60000.0, 65000.0],
        baseVolume: 20000000000,
        baseMarketCap: 1000000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [30000.0, 40000.0, 50000.0, 65000.0],
        baseVolume: 15000000000,
        baseMarketCap: 600000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [1.0, 100.0, 1000.0, 20000.0, 65000.0],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2009, 1, 3),
        interval: const Duration(days: 1460),
      ),
    },
    marketCap: 1200000000000,
    volume: 30000000000,
    circulatingSupply: 19000000,
    totalSupply: 21000000,
    allTimeHigh: 69000.0,
    performance: 120.0,
  ),
  Crypto(
    name: 'Ethereum',
    abbreviation: 'ETH',
    project: 'Ethereum.org',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 3300.0,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [3100.0, 3200.0, 3250.0, 3300.0],
        baseVolume: 15000000000,
        baseMarketCap: 390000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 6.45,
        high24h: 3350.0,
        low24h: 3050.0,
        open24h: 3100.0,
      ),
      '1W': _createTimeRangePoints(
        prices: [3100.0, 3200.0, 3250.0, 3300.0],
        baseVolume: 15000000000,
        baseMarketCap: 390000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [2500.0, 2800.0, 3000.0, 3300.0],
        baseVolume: 12000000000,
        baseMarketCap: 300000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [1000.0, 2000.0, 2800.0, 3300.0],
        baseVolume: 8000000000,
        baseMarketCap: 200000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [1.0, 10.0, 100.0, 1000.0, 3300.0],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2015, 7, 30),
        interval: const Duration(days: 730),
      ),
    },
    marketCap: 390000000000,
    volume: 15000000000,
    circulatingSupply: 120000000,
    totalSupply: 120000000,
    allTimeHigh: 4800.0,
    performance: 90.0,
  ),
  Crypto(
    name: 'Stellar Lumens',
    abbreviation: 'XLM',
    project: 'Stellar.org',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 0.13,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [0.11, 0.12, 0.125, 0.13],
        baseVolume: 50000000,
        baseMarketCap: 3500000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 18.18,
        high24h: 0.135,
        low24h: 0.105,
        open24h: 0.11,
      ),
      '1W': _createTimeRangePoints(
        prices: [0.11, 0.12, 0.125, 0.13],
        baseVolume: 50000000,
        baseMarketCap: 3500000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [0.09, 0.1, 0.12, 0.13],
        baseVolume: 40000000,
        baseMarketCap: 3000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [0.08, 0.09, 0.11, 0.13],
        baseVolume: 30000000,
        baseMarketCap: 2500000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.002, 0.01, 0.05, 0.8, 0.13],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2014, 7, 31),
        interval: const Duration(days: 730),
      ),
    },
    marketCap: 3500000000,
    volume: 50000000,
    circulatingSupply: 27000000000,
    totalSupply: 50000000000,
    allTimeHigh: 0.93,
    performance: 50.0,
  ),
  Crypto(
    name: 'Cardano',
    abbreviation: 'ADA',
    project: 'Cardano.org',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 0.45,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [0.40, 0.42, 0.44, 0.45],
        baseVolume: 600000000,
        baseMarketCap: 16000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 12.5,
        high24h: 0.46,
        low24h: 0.39,
        open24h: 0.40,
      ),
      '1W': _createTimeRangePoints(
        prices: [0.40, 0.42, 0.44, 0.45],
        baseVolume: 600000000,
        baseMarketCap: 16000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [0.35, 0.38, 0.42, 0.45],
        baseVolume: 500000000,
        baseMarketCap: 14000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [0.2, 0.3, 0.4, 0.45],
        baseVolume: 400000000,
        baseMarketCap: 12000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.02, 0.1, 0.9, 3.1, 0.45],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2017, 9, 29),
        interval: const Duration(days: 730),
      ),
    },
    marketCap: 16000000000,
    volume: 600000000,
    circulatingSupply: 35000000000,
    totalSupply: 45000000000,
    allTimeHigh: 3.1,
    performance: 65.0,
  ),
  Crypto(
    name: 'Solana',
    abbreviation: 'SOL',
    project: 'Solana.com',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 100.0,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [95.0, 97.0, 99.0, 100.0],
        baseVolume: 2000000000,
        baseMarketCap: 45000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 5.26,
        high24h: 102.0,
        low24h: 94.0,
        open24h: 95.0,
      ),
      '1W': _createTimeRangePoints(
        prices: [95.0, 97.0, 99.0, 100.0],
        baseVolume: 2000000000,
        baseMarketCap: 45000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [80.0, 85.0, 95.0, 100.0],
        baseVolume: 1500000000,
        baseMarketCap: 40000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [20.0, 50.0, 80.0, 100.0],
        baseVolume: 1000000000,
        baseMarketCap: 30000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.5, 1.0, 10.0, 260.0, 100.0],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2020, 4, 10),
        interval: const Duration(days: 365),
      ),
    },
    marketCap: 45000000000,
    volume: 2000000000,
    circulatingSupply: 450000000,
    totalSupply: 500000000,
    allTimeHigh: 260.0,
    performance: 85.0,
  ),
  Crypto(
    name: 'Ripple',
    abbreviation: 'XRP',
    project: 'Ripple.com',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 0.5,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [0.48, 0.49, 0.495, 0.5],
        baseVolume: 1000000000,
        baseMarketCap: 25000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 4.17,
        high24h: 0.51,
        low24h: 0.47,
        open24h: 0.48,
      ),
      '1W': _createTimeRangePoints(
        prices: [0.48, 0.49, 0.495, 0.5],
        baseVolume: 1000000000,
        baseMarketCap: 25000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [0.45, 0.47, 0.49, 0.5],
        baseVolume: 800000000,
        baseMarketCap: 20000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [0.3, 0.4, 0.45, 0.5],
        baseVolume: 600000000,
        baseMarketCap: 15000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.002, 0.01, 0.1, 3.4, 0.5],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2013, 2, 1),
        interval: const Duration(days: 730),
      ),
    },
    marketCap: 25000000000,
    volume: 1000000000,
    circulatingSupply: 50000000000,
    totalSupply: 100000000000,
    allTimeHigh: 3.4,
    performance: 40.0,
  ),
  Crypto(
    name: 'USD Coin',
    abbreviation: 'USDC',
    project: 'centre.io',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 1.0,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [1.0, 1.0, 1.0, 1.0],
        baseVolume: 3000000000,
        baseMarketCap: 27000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 0.0,
        high24h: 1.0,
        low24h: 1.0,
        open24h: 1.0,
      ),
      '1W': _createTimeRangePoints(
        prices: [1.0, 1.0, 1.0, 1.0],
        baseVolume: 3000000000,
        baseMarketCap: 27000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [1.0, 1.0, 1.0, 1.0],
        baseVolume: 3000000000,
        baseMarketCap: 27000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [1.0, 1.0, 1.0, 1.0],
        baseVolume: 3000000000,
        baseMarketCap: 27000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [1.0, 1.0, 1.0, 1.0, 1.0],
        baseVolume: 3000000000,
        baseMarketCap: 27000000000,
        startTime: DateTime(2018, 9, 26),
        interval: const Duration(days: 365),
      ),
    },
    marketCap: 27000000000,
    volume: 3000000000,
    circulatingSupply: 27000000000,
    totalSupply: 27000000000,
    allTimeHigh: 1.0,
    performance: 0.0,
  ),
  Crypto(
    name: 'Tether',
    abbreviation: 'USDT',
    project: 'tether.to',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 1.0,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [1.0, 1.0, 1.0, 1.0],
        baseVolume: 40000000000,
        baseMarketCap: 86000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 0.0,
        high24h: 1.0,
        low24h: 1.0,
        open24h: 1.0,
      ),
      '1W': _createTimeRangePoints(
        prices: [1.0, 1.0, 1.0, 1.0],
        baseVolume: 40000000000,
        baseMarketCap: 86000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [1.0, 1.0, 1.0, 1.0],
        baseVolume: 40000000000,
        baseMarketCap: 86000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [1.0, 1.0, 1.0, 1.0],
        baseVolume: 40000000000,
        baseMarketCap: 86000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [1.0, 1.0, 1.0, 1.0, 1.0],
        baseVolume: 40000000000,
        baseMarketCap: 86000000000,
        startTime: DateTime(2014, 10, 6),
        interval: const Duration(days: 365),
      ),
    },
    marketCap: 86000000000,
    volume: 40000000000,
    circulatingSupply: 86000000000,
    totalSupply: 86000000000,
    allTimeHigh: 1.01,
    performance: 0.0,
  ),
  Crypto(
    name: 'Velo',
    abbreviation: 'VELO',
    project: 'velo.org',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 0.002,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [0.0018, 0.0019, 0.00195, 0.002],
        baseVolume: 1000000,
        baseMarketCap: 14000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 11.11,
        high24h: 0.0021,
        low24h: 0.0017,
        open24h: 0.0018,
      ),
      '1W': _createTimeRangePoints(
        prices: [0.0018, 0.0019, 0.00195, 0.002],
        baseVolume: 1000000,
        baseMarketCap: 14000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [0.001, 0.0015, 0.0018, 0.002],
        baseVolume: 800000,
        baseMarketCap: 12000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [0.0009, 0.0012, 0.0015, 0.002],
        baseVolume: 600000,
        baseMarketCap: 10000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.005, 0.01, 0.02, 2.0, 0.002],
        baseVolume: 1000000,
        baseMarketCap: 14000000,
        startTime: DateTime(2020, 1, 1),
        interval: const Duration(days: 365),
      ),
    },
    marketCap: 14000000,
    volume: 1000000,
    circulatingSupply: 7000000000,
    totalSupply: 30000000000,
    allTimeHigh: 2.0,
    performance: -80.0,
  ),
  Crypto(
    name: 'Stronghold Token',
    abbreviation: 'SHX',
    project: 'stronghold.co',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 0.005,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [0.0045, 0.0047, 0.0049, 0.005],
        baseVolume: 200000,
        baseMarketCap: 30000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 11.11,
        high24h: 0.0051,
        low24h: 0.0044,
        open24h: 0.0045,
      ),
      '1W': _createTimeRangePoints(
        prices: [0.0045, 0.0047, 0.0049, 0.005],
        baseVolume: 200000,
        baseMarketCap: 30000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [0.004, 0.0043, 0.0048, 0.005],
        baseVolume: 150000,
        baseMarketCap: 25000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [0.003, 0.004, 0.0045, 0.005],
        baseVolume: 100000,
        baseMarketCap: 20000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.001, 0.002, 0.005, 0.1, 0.005],
        baseVolume: 200000,
        baseMarketCap: 30000000,
        startTime: DateTime(2019, 1, 1),
        interval: const Duration(days: 365),
      ),
    },
    marketCap: 30000000,
    volume: 200000,
    circulatingSupply: 6000000000,
    totalSupply: 10000000000,
    allTimeHigh: 0.1,
    performance: -60.0,
  ),
  Crypto(
    name: 'Polkadot',
    abbreviation: 'DOT',
    project: 'Polkadot.network',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 7.0,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [6.5, 6.7, 6.9, 7.0],
        baseVolume: 300000000,
        baseMarketCap: 8000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 7.69,
        high24h: 7.2,
        low24h: 6.4,
        open24h: 6.5,
      ),
      '1W': _createTimeRangePoints(
        prices: [6.5, 6.7, 6.9, 7.0],
        baseVolume: 300000000,
        baseMarketCap: 8000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [5.5, 6.0, 6.5, 7.0],
        baseVolume: 250000000,
        baseMarketCap: 7000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [4.0, 5.0, 6.0, 7.0],
        baseVolume: 200000000,
        baseMarketCap: 6000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [2.0, 3.0, 5.0, 55.0, 7.0],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2020, 8, 19),
        interval: const Duration(days: 365),
      ),
    },
    marketCap: 8000000000,
    volume: 300000000,
    circulatingSupply: 1100000000,
    totalSupply: 1200000000,
    allTimeHigh: 55.0,
    performance: 60.0,
  ),
  Crypto(
    name: 'Dogecoin',
    abbreviation: 'DOGE',
    project: 'Dogecoin.com',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 0.15,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [0.14, 0.145, 0.148, 0.15],
        baseVolume: 500000000,
        baseMarketCap: 20000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 7.14,
        high24h: 0.155,
        low24h: 0.138,
        open24h: 0.14,
      ),
      '1W': _createTimeRangePoints(
        prices: [0.14, 0.145, 0.148, 0.15],
        baseVolume: 500000000,
        baseMarketCap: 20000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [0.12, 0.13, 0.14, 0.15],
        baseVolume: 400000000,
        baseMarketCap: 15000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [0.08, 0.1, 0.12, 0.15],
        baseVolume: 300000000,
        baseMarketCap: 10000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.0002, 0.001, 0.01, 0.73, 0.15],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2013, 12, 6),
        interval: const Duration(days: 730),
      ),
    },
    marketCap: 20000000000,
    volume: 500000000,
    circulatingSupply: 130000000000,
    totalSupply: 140000000000,
    allTimeHigh: 0.73,
    performance: 30.0,
  ),
  Crypto(
    name: 'Avalanche',
    abbreviation: 'AVAX',
    project: 'Avalanche.network',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 35.0,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [32.0, 33.0, 34.0, 35.0],
        baseVolume: 400000000,
        baseMarketCap: 12000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 9.38,
        high24h: 36.0,
        low24h: 31.0,
        open24h: 32.0,
      ),
      '1W': _createTimeRangePoints(
        prices: [32.0, 33.0, 34.0, 35.0],
        baseVolume: 400000000,
        baseMarketCap: 12000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [28.0, 30.0, 32.0, 35.0],
        baseVolume: 300000000,
        baseMarketCap: 10000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [15.0, 20.0, 30.0, 35.0],
        baseVolume: 200000000,
        baseMarketCap: 8000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [2.0, 5.0, 10.0, 147.0, 35.0],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2020, 9, 21),
        interval: const Duration(days: 365),
      ),
    },
    marketCap: 12000000000,
    volume: 400000000,
    circulatingSupply: 350000000,
    totalSupply: 400000000,
    allTimeHigh: 147.0,
    performance: 75.0,
  ),
  Crypto(
    name: 'Chainlink',
    abbreviation: 'LINK',
    project: 'Chain.link',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 15.0,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [14.0, 14.5, 14.8, 15.0],
        baseVolume: 300000000,
        baseMarketCap: 8000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 7.14,
        high24h: 15.5,
        low24h: 13.8,
        open24h: 14.0,
      ),
      '1W': _createTimeRangePoints(
        prices: [14.0, 14.5, 14.8, 15.0],
        baseVolume: 300000000,
        baseMarketCap: 8000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [12.0, 13.0, 14.0, 15.0],
        baseVolume: 250000000,
        baseMarketCap: 7000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [8.0, 10.0, 12.0, 15.0],
        baseVolume: 200000000,
        baseMarketCap: 6000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.5, 1.0, 5.0, 53.0, 15.0],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2019, 5, 30),
        interval: const Duration(days: 365),
      ),
    },
    marketCap: 8000000000,
    volume: 300000000,
    circulatingSupply: 500000000,
    totalSupply: 1000000000,
    allTimeHigh: 53.0,
    performance: 55.0,
  ),
  Crypto(
    name: 'Polygon',
    abbreviation: 'MATIC',
    project: 'Polygon.technology',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 1.0,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [0.95, 0.97, 0.99, 1.0],
        baseVolume: 200000000,
        baseMarketCap: 8000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 5.26,
        high24h: 1.02,
        low24h: 0.94,
        open24h: 0.95,
      ),
      '1W': _createTimeRangePoints(
        prices: [0.95, 0.97, 0.99, 1.0],
        baseVolume: 200000000,
        baseMarketCap: 8000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [0.8, 0.85, 0.95, 1.0],
        baseVolume: 150000000,
        baseMarketCap: 7000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [0.5, 0.7, 0.8, 1.0],
        baseVolume: 100000000,
        baseMarketCap: 6000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.01, 0.1, 0.5, 2.9, 1.0],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2019, 4, 28),
        interval: const Duration(days: 365),
      ),
    },
    marketCap: 8000000000,
    volume: 200000000,
    circulatingSupply: 8000000000,
    totalSupply: 10000000000,
    allTimeHigh: 2.9,
    performance: 45.0,
  ),
  Crypto(
    name: 'Shiba Inu',
    abbreviation: 'SHIB',
    project: 'Shibatoken.com',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 1.0,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [0.95, 0.97, 0.99, 1.0],
        baseVolume: 100000000,
        baseMarketCap: 5000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 5.26,
        high24h: 1.02,
        low24h: 0.94,
        open24h: 0.95,
      ),
      '1W': _createTimeRangePoints(
        prices: [0.95, 0.97, 0.99, 1.0],
        baseVolume: 100000000,
        baseMarketCap: 5000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [0.8, 0.85, 0.95, 1.0],
        baseVolume: 80000000,
        baseMarketCap: 4000000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [0.5, 0.7, 0.8, 1.0],
        baseVolume: 60000000,
        baseMarketCap: 3000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.00000001, 0.0000001, 0.000001, 0.000088, 1.0],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2020, 8, 1),
        interval: const Duration(days: 365),
      ),
    },
    marketCap: 5000000000,
    volume: 100000000,
    circulatingSupply: 500000000000000,
    totalSupply: 1000000000000000,
    allTimeHigh: 0.000088,
    performance: 35.0,
  ),
  Crypto(
    name: 'Tron',
    abbreviation: 'TRX',
    project: 'Tron.network',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 0.002,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [0.0018, 0.0019, 0.00195, 0.002],
        baseVolume: 50000000,
        baseMarketCap: 2000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 11.11,
        high24h: 0.0021,
        low24h: 0.0017,
        open24h: 0.0018,
      ),
      '1W': _createTimeRangePoints(
        prices: [0.0018, 0.0019, 0.00195, 0.002],
        baseVolume: 50000000,
        baseMarketCap: 2000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [0.0015, 0.0016, 0.0018, 0.002],
        baseVolume: 40000000,
        baseMarketCap: 1500000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [0.001, 0.0012, 0.0015, 0.002],
        baseVolume: 30000000,
        baseMarketCap: 1000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.0001, 0.0002, 0.0005, 0.3, 0.002],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2017, 9, 13),
        interval: const Duration(days: 365),
      ),
    },
    marketCap: 2000000000,
    volume: 50000000,
    circulatingSupply: 1000000000000,
    totalSupply: 1000000000000,
    allTimeHigh: 0.3,
    performance: 25.0,
  ),
  Crypto(
    name: 'Litecoin',
    abbreviation: 'LTC',
    project: 'Litecoin.org',
    logoPath: 'assets/logos/btc.png',
    currentPrice: 0.005,
    priceHistory: {
      '1D': _createTimeRangePoints(
        prices: [0.0045, 0.0047, 0.0049, 0.005],
        baseVolume: 30000000,
        baseMarketCap: 4000000000,
        startTime: DateTime.now().subtract(const Duration(hours: 24)),
        interval: const Duration(hours: 8),
        change24h: 11.11,
        high24h: 0.0052,
        low24h: 0.0044,
        open24h: 0.0045,
      ),
      '1W': _createTimeRangePoints(
        prices: [0.0045, 0.0047, 0.0049, 0.005],
        baseVolume: 30000000,
        baseMarketCap: 4000000000,
        startTime: DateTime.now().subtract(const Duration(days: 7)),
        interval: const Duration(days: 2),
      ),
      '1M': _createTimeRangePoints(
        prices: [0.004, 0.0042, 0.0045, 0.005],
        baseVolume: 25000000,
        baseMarketCap: 3500000000,
        startTime: DateTime.now().subtract(const Duration(days: 30)),
        interval: const Duration(days: 10),
      ),
      '1Y': _createTimeRangePoints(
        prices: [0.003, 0.0035, 0.004, 0.005],
        baseVolume: 20000000,
        baseMarketCap: 3000000000,
        startTime: DateTime.now().subtract(const Duration(days: 365)),
        interval: const Duration(days: 120),
      ),
      'All': _createTimeRangePoints(
        prices: [0.0001, 0.0005, 0.001, 0.42, 0.005],
        baseVolume: 1000000,
        baseMarketCap: 20000000,
        startTime: DateTime(2011, 10, 7),
        interval: const Duration(days: 730),
      ),
    },
    marketCap: 4000000000,
    volume: 30000000,
    circulatingSupply: 800000000,
    totalSupply: 84000000,
    allTimeHigh: 0.42,
    performance: 20.0,
  ),
];

List<Crypto> favoriteCryptos = [];
final timeFrameOptions = ['1D', '1W', '1M', '1Y', 'All'];
